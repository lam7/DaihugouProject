//
//  Icon.swift
//  Icon
//
//  Created by lam on 2018/11/01.
//  Copyright Â© 2018 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class Icon : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawGiar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, giarColor: UIColor = UIColor(red: 0.000, green: 0.447, blue: 0.682, alpha: 1.000), giarStickColor: UIColor = UIColor(red: 0.000, green: 0.585, blue: 1.000, alpha: 1.000), fraction: CGFloat = 0.311) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        dump(context)
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        
        
        //// Variable Declarations
        let angleGiar: CGFloat = fraction * 360
        let angleOppGiar: CGFloat = -angleGiar * 2
        
        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 190.1, y: 136)
        context.rotate(by: -angleOppGiar * CGFloat.pi/180)
        
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 0.05, y: -2.4))
        bezier5Path.addLine(to: CGPoint(x: 0.05, y: -6.4))
        bezier5Path.move(to: CGPoint(x: 0, y: 6.25))
        bezier5Path.addLine(to: CGPoint(x: 0, y: 2.25))
        bezier5Path.move(to: CGPoint(x: -2.5, y: -0.15))
        bezier5Path.addLine(to: CGPoint(x: -6.5, y: -0.15))
        bezier5Path.move(to: CGPoint(x: 6.5, y: -0.15))
        bezier5Path.addLine(to: CGPoint(x: 2.5, y: -0.15))
        giarStickColor.setStroke()
        bezier5Path.lineWidth = 0.5
        bezier5Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 209, y: 118)
        context.rotate(by: -angleGiar * CGFloat.pi/180)
        
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 2.51, y: -15.4))
        bezier6Path.addCurve(to: CGPoint(x: 2.83, y: -12.89), controlPoint1: CGPoint(x: 2.61, y: -14.6), controlPoint2: CGPoint(x: 2.73, y: -13.7))
        bezier6Path.addCurve(to: CGPoint(x: 3.86, y: -12.62), controlPoint1: CGPoint(x: 3.17, y: -12.82), controlPoint2: CGPoint(x: 3.52, y: -12.73))
        bezier6Path.addCurve(to: CGPoint(x: 4.86, y: -12.27), controlPoint1: CGPoint(x: 4.2, y: -12.52), controlPoint2: CGPoint(x: 4.54, y: -12.4))
        bezier6Path.addCurve(to: CGPoint(x: 6.53, y: -14.17), controlPoint1: CGPoint(x: 5.4, y: -12.88), controlPoint2: CGPoint(x: 6, y: -13.56))
        bezier6Path.addCurve(to: CGPoint(x: 7.62, y: -13.61), controlPoint1: CGPoint(x: 6.9, y: -14), controlPoint2: CGPoint(x: 7.27, y: -13.81))
        bezier6Path.addCurve(to: CGPoint(x: 7.07, y: -11.15), controlPoint1: CGPoint(x: 7.45, y: -12.82), controlPoint2: CGPoint(x: 7.25, y: -11.95))
        bezier6Path.addCurve(to: CGPoint(x: 8.77, y: -9.87), controlPoint1: CGPoint(x: 7.68, y: -10.77), controlPoint2: CGPoint(x: 8.24, y: -10.34))
        bezier6Path.addCurve(to: CGPoint(x: 10.98, y: -11.08), controlPoint1: CGPoint(x: 9.49, y: -10.26), controlPoint2: CGPoint(x: 10.27, y: -10.69))
        bezier6Path.addCurve(to: CGPoint(x: 11.82, y: -10.18), controlPoint1: CGPoint(x: 11.28, y: -10.79), controlPoint2: CGPoint(x: 11.55, y: -10.49))
        bezier6Path.addCurve(to: CGPoint(x: 10.46, y: -8.06), controlPoint1: CGPoint(x: 11.38, y: -9.5), controlPoint2: CGPoint(x: 10.9, y: -8.75))
        bezier6Path.addCurve(to: CGPoint(x: 11.61, y: -6.27), controlPoint1: CGPoint(x: 10.89, y: -7.5), controlPoint2: CGPoint(x: 11.28, y: -6.9))
        bezier6Path.addCurve(to: CGPoint(x: 14.11, y: -6.66), controlPoint1: CGPoint(x: 12.42, y: -6.4), controlPoint2: CGPoint(x: 13.31, y: -6.53))
        bezier6Path.addCurve(to: CGPoint(x: 14.59, y: -5.53), controlPoint1: CGPoint(x: 14.28, y: -6.29), controlPoint2: CGPoint(x: 14.44, y: -5.91))
        bezier6Path.addCurve(to: CGPoint(x: 12.58, y: -4), controlPoint1: CGPoint(x: 13.95, y: -5.04), controlPoint2: CGPoint(x: 13.23, y: -4.49))
        bezier6Path.addCurve(to: CGPoint(x: 13.06, y: -1.92), controlPoint1: CGPoint(x: 12.8, y: -3.32), controlPoint2: CGPoint(x: 12.96, y: -2.63))
        bezier6Path.addCurve(to: CGPoint(x: 15.54, y: -1.43), controlPoint1: CGPoint(x: 13.86, y: -1.76), controlPoint2: CGPoint(x: 14.74, y: -1.59))
        bezier6Path.addCurve(to: CGPoint(x: 15.6, y: -0.2), controlPoint1: CGPoint(x: 15.58, y: -1.02), controlPoint2: CGPoint(x: 15.6, y: -0.61))
        bezier6Path.addCurve(to: CGPoint(x: 13.19, y: 0.55), controlPoint1: CGPoint(x: 14.83, y: 0.04), controlPoint2: CGPoint(x: 13.97, y: 0.3))
        bezier6Path.addCurve(to: CGPoint(x: 12.93, y: 2.66), controlPoint1: CGPoint(x: 13.16, y: 1.25), controlPoint2: CGPoint(x: 13.08, y: 1.95))
        bezier6Path.addCurve(to: CGPoint(x: 15.09, y: 3.97), controlPoint1: CGPoint(x: 13.63, y: 3.08), controlPoint2: CGPoint(x: 14.4, y: 3.55))
        bezier6Path.addCurve(to: CGPoint(x: 14.92, y: 4.56), controlPoint1: CGPoint(x: 15.03, y: 4.17), controlPoint2: CGPoint(x: 14.98, y: 4.36))
        bezier6Path.addLine(to: CGPoint(x: 14.84, y: 4.8))
        bezier6Path.addLine(to: CGPoint(x: 14.73, y: 5.14))
        bezier6Path.addCurve(to: CGPoint(x: 12.21, y: 5.03), controlPoint1: CGPoint(x: 13.92, y: 5.11), controlPoint2: CGPoint(x: 13.02, y: 5.06))
        bezier6Path.addCurve(to: CGPoint(x: 11.24, y: 6.92), controlPoint1: CGPoint(x: 11.93, y: 5.69), controlPoint2: CGPoint(x: 11.61, y: 6.33))
        bezier6Path.addCurve(to: CGPoint(x: 12.82, y: 8.89), controlPoint1: CGPoint(x: 11.75, y: 7.56), controlPoint2: CGPoint(x: 12.32, y: 8.26))
        bezier6Path.addCurve(to: CGPoint(x: 12.08, y: 9.87), controlPoint1: CGPoint(x: 12.59, y: 9.23), controlPoint2: CGPoint(x: 12.34, y: 9.56))
        bezier6Path.addCurve(to: CGPoint(x: 9.75, y: 8.9), controlPoint1: CGPoint(x: 11.34, y: 9.56), controlPoint2: CGPoint(x: 10.51, y: 9.21))
        bezier6Path.addCurve(to: CGPoint(x: 8.2, y: 10.35), controlPoint1: CGPoint(x: 9.27, y: 9.43), controlPoint2: CGPoint(x: 8.75, y: 9.91))
        bezier6Path.addCurve(to: CGPoint(x: 9.01, y: 12.74), controlPoint1: CGPoint(x: 8.46, y: 11.12), controlPoint2: CGPoint(x: 8.75, y: 11.97))
        bezier6Path.addCurve(to: CGPoint(x: 7.97, y: 13.41), controlPoint1: CGPoint(x: 8.67, y: 12.98), controlPoint2: CGPoint(x: 8.33, y: 13.2))
        bezier6Path.addCurve(to: CGPoint(x: 6.12, y: 11.7), controlPoint1: CGPoint(x: 7.38, y: 12.86), controlPoint2: CGPoint(x: 6.72, y: 12.25))
        bezier6Path.addCurve(to: CGPoint(x: 4.16, y: 12.53), controlPoint1: CGPoint(x: 5.49, y: 12.02), controlPoint2: CGPoint(x: 4.84, y: 12.3))
        bezier6Path.addCurve(to: CGPoint(x: 4.11, y: 15.05), controlPoint1: CGPoint(x: 4.14, y: 13.34), controlPoint2: CGPoint(x: 4.12, y: 14.24))
        bezier6Path.addCurve(to: CGPoint(x: 2.91, y: 15.33), controlPoint1: CGPoint(x: 3.71, y: 15.16), controlPoint2: CGPoint(x: 3.31, y: 15.25))
        bezier6Path.addCurve(to: CGPoint(x: 1.75, y: 13.09), controlPoint1: CGPoint(x: 2.54, y: 14.61), controlPoint2: CGPoint(x: 2.13, y: 13.81))
        bezier6Path.addCurve(to: CGPoint(x: -0.37, y: 13.2), controlPoint1: CGPoint(x: 1.05, y: 13.18), controlPoint2: CGPoint(x: 0.34, y: 13.22))
        bezier6Path.addCurve(to: CGPoint(x: -1.29, y: 15.55), controlPoint1: CGPoint(x: -0.67, y: 13.96), controlPoint2: CGPoint(x: -1, y: 14.8))
        bezier6Path.addCurve(to: CGPoint(x: -2.51, y: 15.4), controlPoint1: CGPoint(x: -1.7, y: 15.52), controlPoint2: CGPoint(x: -2.1, y: 15.47))
        bezier6Path.addCurve(to: CGPoint(x: -2.83, y: 12.89), controlPoint1: CGPoint(x: -2.61, y: 14.6), controlPoint2: CGPoint(x: -2.73, y: 13.7))
        bezier6Path.addCurve(to: CGPoint(x: -3.86, y: 12.62), controlPoint1: CGPoint(x: -3.17, y: 12.82), controlPoint2: CGPoint(x: -3.52, y: 12.73))
        bezier6Path.addCurve(to: CGPoint(x: -4.86, y: 12.27), controlPoint1: CGPoint(x: -4.2, y: 12.52), controlPoint2: CGPoint(x: -4.54, y: 12.4))
        bezier6Path.addCurve(to: CGPoint(x: -6.53, y: 14.17), controlPoint1: CGPoint(x: -5.4, y: 12.88), controlPoint2: CGPoint(x: -6, y: 13.56))
        bezier6Path.addCurve(to: CGPoint(x: -7.62, y: 13.61), controlPoint1: CGPoint(x: -6.9, y: 14), controlPoint2: CGPoint(x: -7.27, y: 13.81))
        bezier6Path.addCurve(to: CGPoint(x: -7.07, y: 11.15), controlPoint1: CGPoint(x: -7.45, y: 12.82), controlPoint2: CGPoint(x: -7.25, y: 11.95))
        bezier6Path.addCurve(to: CGPoint(x: -8.77, y: 9.87), controlPoint1: CGPoint(x: -7.68, y: 10.77), controlPoint2: CGPoint(x: -8.24, y: 10.34))
        bezier6Path.addCurve(to: CGPoint(x: -10.98, y: 11.08), controlPoint1: CGPoint(x: -9.49, y: 10.26), controlPoint2: CGPoint(x: -10.27, y: 10.69))
        bezier6Path.addCurve(to: CGPoint(x: -11.82, y: 10.18), controlPoint1: CGPoint(x: -11.28, y: 10.79), controlPoint2: CGPoint(x: -11.55, y: 10.49))
        bezier6Path.addCurve(to: CGPoint(x: -10.46, y: 8.06), controlPoint1: CGPoint(x: -11.38, y: 9.5), controlPoint2: CGPoint(x: -10.9, y: 8.75))
        bezier6Path.addCurve(to: CGPoint(x: -11.61, y: 6.27), controlPoint1: CGPoint(x: -10.89, y: 7.5), controlPoint2: CGPoint(x: -11.28, y: 6.9))
        bezier6Path.addCurve(to: CGPoint(x: -14.11, y: 6.66), controlPoint1: CGPoint(x: -12.42, y: 6.4), controlPoint2: CGPoint(x: -13.31, y: 6.53))
        bezier6Path.addCurve(to: CGPoint(x: -14.59, y: 5.53), controlPoint1: CGPoint(x: -14.28, y: 6.29), controlPoint2: CGPoint(x: -14.44, y: 5.91))
        bezier6Path.addCurve(to: CGPoint(x: -12.58, y: 4), controlPoint1: CGPoint(x: -13.95, y: 5.04), controlPoint2: CGPoint(x: -13.23, y: 4.49))
        bezier6Path.addCurve(to: CGPoint(x: -13.06, y: 1.92), controlPoint1: CGPoint(x: -12.8, y: 3.32), controlPoint2: CGPoint(x: -12.96, y: 2.63))
        bezier6Path.addCurve(to: CGPoint(x: -15.54, y: 1.43), controlPoint1: CGPoint(x: -13.86, y: 1.76), controlPoint2: CGPoint(x: -14.74, y: 1.59))
        bezier6Path.addCurve(to: CGPoint(x: -15.6, y: 0.2), controlPoint1: CGPoint(x: -15.58, y: 1.02), controlPoint2: CGPoint(x: -15.6, y: 0.61))
        bezier6Path.addCurve(to: CGPoint(x: -13.19, y: -0.55), controlPoint1: CGPoint(x: -14.83, y: -0.04), controlPoint2: CGPoint(x: -13.97, y: -0.3))
        bezier6Path.addCurve(to: CGPoint(x: -12.93, y: -2.66), controlPoint1: CGPoint(x: -13.16, y: -1.25), controlPoint2: CGPoint(x: -13.08, y: -1.95))
        bezier6Path.addCurve(to: CGPoint(x: -15.09, y: -3.97), controlPoint1: CGPoint(x: -13.63, y: -3.08), controlPoint2: CGPoint(x: -14.4, y: -3.55))
        bezier6Path.addCurve(to: CGPoint(x: -14.92, y: -4.56), controlPoint1: CGPoint(x: -15.03, y: -4.17), controlPoint2: CGPoint(x: -14.98, y: -4.36))
        bezier6Path.addCurve(to: CGPoint(x: -14.73, y: -5.14), controlPoint1: CGPoint(x: -14.86, y: -4.76), controlPoint2: CGPoint(x: -14.79, y: -4.95))
        bezier6Path.addCurve(to: CGPoint(x: -12.21, y: -5.03), controlPoint1: CGPoint(x: -13.92, y: -5.11), controlPoint2: CGPoint(x: -13.02, y: -5.06))
        bezier6Path.addCurve(to: CGPoint(x: -11.24, y: -6.92), controlPoint1: CGPoint(x: -11.93, y: -5.69), controlPoint2: CGPoint(x: -11.61, y: -6.33))
        bezier6Path.addCurve(to: CGPoint(x: -12.82, y: -8.89), controlPoint1: CGPoint(x: -11.75, y: -7.56), controlPoint2: CGPoint(x: -12.32, y: -8.26))
        bezier6Path.addCurve(to: CGPoint(x: -12.15, y: -9.79), controlPoint1: CGPoint(x: -12.61, y: -9.2), controlPoint2: CGPoint(x: -12.38, y: -9.5))
        bezier6Path.addLine(to: CGPoint(x: -12.08, y: -9.87))
        bezier6Path.addCurve(to: CGPoint(x: -9.75, y: -8.9), controlPoint1: CGPoint(x: -11.34, y: -9.56), controlPoint2: CGPoint(x: -10.51, y: -9.21))
        bezier6Path.addCurve(to: CGPoint(x: -8.2, y: -10.35), controlPoint1: CGPoint(x: -9.27, y: -9.43), controlPoint2: CGPoint(x: -8.75, y: -9.91))
        bezier6Path.addCurve(to: CGPoint(x: -9.01, y: -12.74), controlPoint1: CGPoint(x: -8.46, y: -11.12), controlPoint2: CGPoint(x: -8.75, y: -11.97))
        bezier6Path.addCurve(to: CGPoint(x: -7.97, y: -13.41), controlPoint1: CGPoint(x: -8.67, y: -12.98), controlPoint2: CGPoint(x: -8.33, y: -13.2))
        bezier6Path.addCurve(to: CGPoint(x: -6.12, y: -11.7), controlPoint1: CGPoint(x: -7.38, y: -12.86), controlPoint2: CGPoint(x: -6.72, y: -12.25))
        bezier6Path.addCurve(to: CGPoint(x: -4.16, y: -12.53), controlPoint1: CGPoint(x: -5.49, y: -12.02), controlPoint2: CGPoint(x: -4.84, y: -12.3))
        bezier6Path.addCurve(to: CGPoint(x: -4.11, y: -15.05), controlPoint1: CGPoint(x: -4.14, y: -13.34), controlPoint2: CGPoint(x: -4.12, y: -14.24))
        bezier6Path.addCurve(to: CGPoint(x: -2.91, y: -15.33), controlPoint1: CGPoint(x: -3.71, y: -15.16), controlPoint2: CGPoint(x: -3.31, y: -15.25))
        bezier6Path.addCurve(to: CGPoint(x: -1.75, y: -13.09), controlPoint1: CGPoint(x: -2.54, y: -14.61), controlPoint2: CGPoint(x: -2.13, y: -13.81))
        bezier6Path.addCurve(to: CGPoint(x: 0.37, y: -13.2), controlPoint1: CGPoint(x: -1.05, y: -13.18), controlPoint2: CGPoint(x: -0.34, y: -13.22))
        bezier6Path.addCurve(to: CGPoint(x: 1.29, y: -15.55), controlPoint1: CGPoint(x: 0.67, y: -13.96), controlPoint2: CGPoint(x: 1, y: -14.8))
        bezier6Path.addCurve(to: CGPoint(x: 2.51, y: -15.4), controlPoint1: CGPoint(x: 1.7, y: -15.52), controlPoint2: CGPoint(x: 2.1, y: -15.47))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: -0, y: -9.6))
        bezier6Path.addCurve(to: CGPoint(x: -5.5, y: -7.87), controlPoint1: CGPoint(x: -2.05, y: -9.6), controlPoint2: CGPoint(x: -3.94, y: -8.96))
        bezier6Path.addCurve(to: CGPoint(x: -9.6, y: 0), controlPoint1: CGPoint(x: -7.98, y: -6.13), controlPoint2: CGPoint(x: -9.6, y: -3.26))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: 9.6), controlPoint1: CGPoint(x: -9.6, y: 5.3), controlPoint2: CGPoint(x: -5.3, y: 9.6))
        bezier6Path.addCurve(to: CGPoint(x: 9.6, y: 0), controlPoint1: CGPoint(x: 5.3, y: 9.6), controlPoint2: CGPoint(x: 9.6, y: 5.3))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: -9.6), controlPoint1: CGPoint(x: 9.6, y: -5.3), controlPoint2: CGPoint(x: 5.3, y: -9.6))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: -0, y: -1))
        bezier6Path.addCurve(to: CGPoint(x: -0.6, y: -0.8), controlPoint1: CGPoint(x: -0.23, y: -1), controlPoint2: CGPoint(x: -0.44, y: -0.92))
        bezier6Path.addCurve(to: CGPoint(x: -1, y: 0), controlPoint1: CGPoint(x: -0.84, y: -0.61), controlPoint2: CGPoint(x: -1, y: -0.33))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: 1), controlPoint1: CGPoint(x: -1, y: 0.55), controlPoint2: CGPoint(x: -0.55, y: 1))
        bezier6Path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0.55, y: 1), controlPoint2: CGPoint(x: 1, y: 0.55))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: -1), controlPoint1: CGPoint(x: 1, y: -0.55), controlPoint2: CGPoint(x: 0.55, y: -1))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: 5, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: 5), controlPoint1: CGPoint(x: 5, y: 2.76), controlPoint2: CGPoint(x: 2.76, y: 5))
        bezier6Path.addCurve(to: CGPoint(x: -5, y: 0), controlPoint1: CGPoint(x: -2.76, y: 5), controlPoint2: CGPoint(x: -5, y: 2.76))
        bezier6Path.addCurve(to: CGPoint(x: -2.88, y: -4.09), controlPoint1: CGPoint(x: -5, y: -1.69), controlPoint2: CGPoint(x: -4.16, y: -3.19))
        bezier6Path.addCurve(to: CGPoint(x: -0, y: -5), controlPoint1: CGPoint(x: -2.06, y: -4.66), controlPoint2: CGPoint(x: -1.07, y: -5))
        bezier6Path.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 2.76, y: -5), controlPoint2: CGPoint(x: 5, y: -2.76))
        bezier6Path.close()
        giarColor.setFill()
        bezier6Path.fill()
        
        context.restoreGState()
        
        
        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 190.1, y: 136)
        context.rotate(by: -angleOppGiar * CGFloat.pi/180)
        
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.66, y: -8.66))
        bezierPath.addCurve(to: CGPoint(x: 1.07, y: -8.62), controlPoint1: CGPoint(x: 0.8, y: -8.65), controlPoint2: CGPoint(x: 0.93, y: -8.64))
        bezierPath.addCurve(to: CGPoint(x: 1.48, y: -8.56), controlPoint1: CGPoint(x: 1.21, y: -8.6), controlPoint2: CGPoint(x: 1.35, y: -8.58))
        bezierPath.addCurve(to: CGPoint(x: 4.65, y: -11.36), controlPoint1: CGPoint(x: 2.17, y: -9.17), controlPoint2: CGPoint(x: 3.51, y: -10.35))
        bezierPath.addCurve(to: CGPoint(x: 6.33, y: -10.49), controlPoint1: CGPoint(x: 5.24, y: -11.11), controlPoint2: CGPoint(x: 5.8, y: -10.82))
        bezierPath.addCurve(to: CGPoint(x: 5.89, y: -6.28), controlPoint1: CGPoint(x: 6.18, y: -8.98), controlPoint2: CGPoint(x: 5.99, y: -7.2))
        bezierPath.addCurve(to: CGPoint(x: 6.45, y: -5.68), controlPoint1: CGPoint(x: 6.09, y: -6.09), controlPoint2: CGPoint(x: 6.28, y: -5.89))
        bezierPath.addCurve(to: CGPoint(x: 10.68, y: -5.79), controlPoint1: CGPoint(x: 7.38, y: -5.7), controlPoint2: CGPoint(x: 9.16, y: -5.75))
        bezierPath.addCurve(to: CGPoint(x: 11.41, y: -4.04), controlPoint1: CGPoint(x: 10.97, y: -5.23), controlPoint2: CGPoint(x: 11.21, y: -4.64))
        bezierPath.addCurve(to: CGPoint(x: 8.37, y: -1.1), controlPoint1: CGPoint(x: 10.32, y: -2.98), controlPoint2: CGPoint(x: 9.04, y: -1.74))
        bezierPath.addCurve(to: CGPoint(x: 8.41, y: -0.27), controlPoint1: CGPoint(x: 8.4, y: -0.83), controlPoint2: CGPoint(x: 8.41, y: -0.55))
        bezierPath.addCurve(to: CGPoint(x: 11.71, y: 2.36), controlPoint1: CGPoint(x: 9.13, y: 0.3), controlPoint2: CGPoint(x: 10.53, y: 1.41))
        bezierPath.addCurve(to: CGPoint(x: 11.15, y: 4.17), controlPoint1: CGPoint(x: 11.57, y: 2.98), controlPoint2: CGPoint(x: 11.39, y: 3.59))
        bezierPath.addCurve(to: CGPoint(x: 6.94, y: 4.46), controlPoint1: CGPoint(x: 9.64, y: 4.28), controlPoint2: CGPoint(x: 7.86, y: 4.4))
        bezierPath.addCurve(to: CGPoint(x: 6.44, y: 5.12), controlPoint1: CGPoint(x: 6.78, y: 4.69), controlPoint2: CGPoint(x: 6.61, y: 4.91))
        bezierPath.addCurve(to: CGPoint(x: 7.28, y: 9.26), controlPoint1: CGPoint(x: 6.62, y: 6.03), controlPoint2: CGPoint(x: 6.97, y: 7.78))
        bezierPath.addCurve(to: CGPoint(x: 5.68, y: 10.29), controlPoint1: CGPoint(x: 6.77, y: 9.65), controlPoint2: CGPoint(x: 6.24, y: 9.99))
        bezierPath.addCurve(to: CGPoint(x: 2.26, y: 7.81), controlPoint1: CGPoint(x: 4.45, y: 9.4), controlPoint2: CGPoint(x: 3.01, y: 8.35))
        bezierPath.addCurve(to: CGPoint(x: 1.45, y: 7.99), controlPoint1: CGPoint(x: 2, y: 7.88), controlPoint2: CGPoint(x: 1.73, y: 7.94))
        bezierPath.addCurve(to: CGPoint(x: -0.56, y: 11.7), controlPoint1: CGPoint(x: 1.01, y: 8.8), controlPoint2: CGPoint(x: 0.16, y: 10.37))
        bezierPath.addCurve(to: CGPoint(x: -1.51, y: 11.62), controlPoint1: CGPoint(x: -0.88, y: 11.68), controlPoint2: CGPoint(x: -1.19, y: 11.66))
        bezierPath.addCurve(to: CGPoint(x: -2.21, y: 11.51), controlPoint1: CGPoint(x: -1.74, y: 11.59), controlPoint2: CGPoint(x: -1.98, y: 11.55))
        bezierPath.addLine(to: CGPoint(x: -2.45, y: 11.46))
        bezierPath.addCurve(to: CGPoint(x: -3.47, y: 7.36), controlPoint1: CGPoint(x: -2.81, y: 9.99), controlPoint2: CGPoint(x: -3.24, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: -4.2, y: 6.98), controlPoint1: CGPoint(x: -3.72, y: 7.25), controlPoint2: CGPoint(x: -3.97, y: 7.12))
        bezierPath.addCurve(to: CGPoint(x: -6.87, y: 8.03), controlPoint1: CGPoint(x: -4.81, y: 7.22), controlPoint2: CGPoint(x: -5.83, y: 7.62))
        bezierPath.addCurve(to: CGPoint(x: -8.13, y: 8.53), controlPoint1: CGPoint(x: -7.29, y: 8.2), controlPoint2: CGPoint(x: -7.72, y: 8.37))
        bezierPath.addCurve(to: CGPoint(x: -9.42, y: 7.13), controlPoint1: CGPoint(x: -8.6, y: 8.1), controlPoint2: CGPoint(x: -9.03, y: 7.63))
        bezierPath.addCurve(to: CGPoint(x: -9.06, y: 6.39), controlPoint1: CGPoint(x: -9.3, y: 6.89), controlPoint2: CGPoint(x: -9.18, y: 6.64))
        bezierPath.addCurve(to: CGPoint(x: -7.57, y: 3.34), controlPoint1: CGPoint(x: -8.49, y: 5.22), controlPoint2: CGPoint(x: -7.9, y: 4.02))
        bezierPath.addCurve(to: CGPoint(x: -7.89, y: 2.57), controlPoint1: CGPoint(x: -7.69, y: 3.09), controlPoint2: CGPoint(x: -7.8, y: 2.83))
        bezierPath.addCurve(to: CGPoint(x: -11.9, y: 1.23), controlPoint1: CGPoint(x: -8.77, y: 2.28), controlPoint2: CGPoint(x: -10.46, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: -11.99, y: -0.67), controlPoint1: CGPoint(x: -11.98, y: 0.61), controlPoint2: CGPoint(x: -12.01, y: -0.02))
        bezierPath.addCurve(to: CGPoint(x: -8.13, y: -2.38), controlPoint1: CGPoint(x: -10.6, y: -1.28), controlPoint2: CGPoint(x: -8.97, y: -2.01))
        bezierPath.addCurve(to: CGPoint(x: -7.88, y: -3.17), controlPoint1: CGPoint(x: -8.06, y: -2.65), controlPoint2: CGPoint(x: -7.98, y: -2.92))
        bezierPath.addCurve(to: CGPoint(x: -10.09, y: -6.78), controlPoint1: CGPoint(x: -8.36, y: -3.96), controlPoint2: CGPoint(x: -9.3, y: -5.49))
        bezierPath.addCurve(to: CGPoint(x: -8.94, y: -8.29), controlPoint1: CGPoint(x: -9.74, y: -7.31), controlPoint2: CGPoint(x: -9.36, y: -7.82))
        bezierPath.addCurve(to: CGPoint(x: -4.87, y: -7.12), controlPoint1: CGPoint(x: -7.48, y: -7.87), controlPoint2: CGPoint(x: -5.76, y: -7.38))
        bezierPath.addCurve(to: CGPoint(x: -4.18, y: -7.57), controlPoint1: CGPoint(x: -4.65, y: -7.28), controlPoint2: CGPoint(x: -4.42, y: -7.43))
        bezierPath.addCurve(to: CGPoint(x: -3.55, y: -11.75), controlPoint1: CGPoint(x: -4.04, y: -8.48), controlPoint2: CGPoint(x: -3.78, y: -10.25))
        bezierPath.addCurve(to: CGPoint(x: -1.7, y: -12.17), controlPoint1: CGPoint(x: -2.95, y: -11.94), controlPoint2: CGPoint(x: -2.33, y: -12.08))
        bezierPath.addCurve(to: CGPoint(x: 0.66, y: -8.66), controlPoint1: CGPoint(x: -0.86, y: -10.91), controlPoint2: CGPoint(x: 0.14, y: -9.43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0.03, y: -6.43))
        bezierPath.addCurve(to: CGPoint(x: -2.61, y: -5.85), controlPoint1: CGPoint(x: -0.92, y: -6.43), controlPoint2: CGPoint(x: -1.81, y: -6.23))
        bezierPath.addCurve(to: CGPoint(x: -6.27, y: -0.13), controlPoint1: CGPoint(x: -4.77, y: -4.86), controlPoint2: CGPoint(x: -6.27, y: -2.67))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: 6.17), controlPoint1: CGPoint(x: -6.27, y: 3.35), controlPoint2: CGPoint(x: -3.45, y: 6.17))
        bezierPath.addCurve(to: CGPoint(x: 6.33, y: -0.13), controlPoint1: CGPoint(x: 3.51, y: 6.17), controlPoint2: CGPoint(x: 6.33, y: 3.35))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: -6.43), controlPoint1: CGPoint(x: 6.33, y: -3.61), controlPoint2: CGPoint(x: 3.51, y: -6.43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: -0.5))
        bezierPath.addCurve(to: CGPoint(x: -0.3, y: -0.4), controlPoint1: CGPoint(x: -0.11, y: -0.5), controlPoint2: CGPoint(x: -0.22, y: -0.46))
        bezierPath.addCurve(to: CGPoint(x: -0.5, y: 0), controlPoint1: CGPoint(x: -0.42, y: -0.31), controlPoint2: CGPoint(x: -0.5, y: -0.16))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 0.5), controlPoint1: CGPoint(x: -0.5, y: 0.28), controlPoint2: CGPoint(x: -0.28, y: 0.5))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 0), controlPoint1: CGPoint(x: 0.28, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.28))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -0.5), controlPoint1: CGPoint(x: 0.5, y: -0.28), controlPoint2: CGPoint(x: 0.28, y: -0.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 2.5, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 2.5, y: 1.38), controlPoint2: CGPoint(x: 1.38, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: -2.5, y: 0), controlPoint1: CGPoint(x: -1.38, y: 2.5), controlPoint2: CGPoint(x: -2.5, y: 1.38))
        bezierPath.addCurve(to: CGPoint(x: -1.44, y: -2.05), controlPoint1: CGPoint(x: -2.5, y: -0.85), controlPoint2: CGPoint(x: -2.08, y: -1.59))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -2.5), controlPoint1: CGPoint(x: -1.03, y: -2.33), controlPoint2: CGPoint(x: -0.54, y: -2.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 1.38, y: -2.5), controlPoint2: CGPoint(x: 2.5, y: -1.38))
        bezierPath.close()
        giarColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    @objc dynamic public class func drawSword(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, swordColor: UIColor = UIColor(red: 0.000, green: 0.447, blue: 0.682, alpha: 1.000), fraction: CGFloat = 0.311) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        
        
        //// Variable Declarations
        let angleSword: CGFloat = fraction <= 0.5 ? -45 + fraction * 40 : (fraction <= 0.9 ? -25 - (fraction - 0.5) * 80 : -57 + (fraction - 0.9) * 120)
        let angleOppSword: CGFloat = -angleSword
        
        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 5.5, y: 46.5)
        context.rotate(by: -angleSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: -10))
        swordColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .bevel
        bezierPath.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 5.5, y: 46.5)
        context.rotate(by: -angleSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: -6, y: -7))
        bezier2Path.addCurve(to: CGPoint(x: -3, y: -8), controlPoint1: CGPoint(x: -4.58, y: -7.22), controlPoint2: CGPoint(x: -3.8, y: -7.58))
        bezier2Path.addCurve(to: CGPoint(x: 0.42, y: -10), controlPoint1: CGPoint(x: -0.17, y: -9.47), controlPoint2: CGPoint(x: -0.3, y: -11.56))
        bezier2Path.addCurve(to: CGPoint(x: 5, y: -7), controlPoint1: CGPoint(x: 1.33, y: -8), controlPoint2: CGPoint(x: 5, y: -7))
        swordColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 5.5, y: 46.5)
        context.rotate(by: -angleSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -0, y: -10))
        bezier3Path.addLine(to: CGPoint(x: -0, y: -34))
        swordColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: 5.5, y: 46.5)
        context.rotate(by: -angleSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: -0, y: -11))
        bezier4Path.addLine(to: CGPoint(x: -0, y: -33))
        UIColor.white.setStroke()
        bezier4Path.lineWidth = 0.6
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 44.5, y: 46.5)
        context.rotate(by: -angleOppSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 0, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 0, y: -10))
        swordColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .bevel
        bezier5Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 44.5, y: 46.5)
        context.rotate(by: -angleOppSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -6, y: -7))
        bezier6Path.addCurve(to: CGPoint(x: -3, y: -8), controlPoint1: CGPoint(x: -4.58, y: -7.22), controlPoint2: CGPoint(x: -3.8, y: -7.58))
        bezier6Path.addCurve(to: CGPoint(x: 0.42, y: -10), controlPoint1: CGPoint(x: -0.17, y: -9.47), controlPoint2: CGPoint(x: -0.3, y: -11.56))
        bezier6Path.addCurve(to: CGPoint(x: 5, y: -7), controlPoint1: CGPoint(x: 1.33, y: -8), controlPoint2: CGPoint(x: 5, y: -7))
        swordColor.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.lineCapStyle = .round
        bezier6Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: 44.5, y: 46.5)
        context.rotate(by: -angleOppSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -0, y: -10))
        bezier7Path.addLine(to: CGPoint(x: -0, y: -34))
        swordColor.setStroke()
        bezier7Path.lineWidth = 2
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()
        
        context.restoreGState()
        
        
        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 44.5, y: 46.5)
        context.rotate(by: -angleOppSword * CGFloat.pi/180)
        context.scaleBy(x: 1.2, y: 1.4)
        
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -0, y: -11))
        bezier8Path.addLine(to: CGPoint(x: -0, y: -33))
        UIColor.white.setStroke()
        bezier8Path.lineWidth = 0.6
        bezier8Path.lineCapStyle = .round
        bezier8Path.stroke()
        
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    @objc dynamic public class func drawDiamond(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit, diamondColor: UIColor = UIColor(red: 0.000, green: 0.447, blue: 0.682, alpha: 1.000), starColor: UIColor = UIColor(red: 1.000, green: 0.870, blue: 0.000, alpha: 1.000), fraction: CGFloat = 0.311) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        
        
        //// Variable Declarations
        let effect1 = fraction == 0 ? true : fraction >= 0.333333333333
        let effect2 = fraction == 0 ? true : fraction >= 0.666666666666
        let effect3 = fraction == 0 ? true : fraction == 1
        let sizeDiamond: CGFloat = fraction <= 0.4 ? 1 - fraction : (fraction <= 0.6 ? 0.6 + (fraction - 0.4) * 3 : (fraction <= 0.7 ? 1.2 - (fraction - 0.6) * 2 : 1))
        
        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 25, y: 32)
        context.scaleBy(x: sizeDiamond, y: sizeDiamond)
        
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -20, y: -7.94))
        bezierPath.addLine(to: CGPoint(x: -11.67, y: -15))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: -15))
        bezierPath.addLine(to: CGPoint(x: 20, y: -7.94))
        bezierPath.addLine(to: CGPoint(x: 0, y: 15))
        bezierPath.addLine(to: CGPoint(x: -20, y: -7.94))
        bezierPath.close()
        diamondColor.setFill()
        bezierPath.fill()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 0
        bezierPath.stroke()
        
        context.restoreGState()
        
        
        if (effect1) {
            //// Star Drawing
            context.saveGState()
            context.translateBy(x: 15, y: 11)
            
            let starPath = UIBezierPath()
            starPath.move(to: CGPoint(x: 0, y: -4))
            starPath.addLine(to: CGPoint(x: 0.47, y: -0.65))
            starPath.addLine(to: CGPoint(x: 3.8, y: -1.24))
            starPath.addLine(to: CGPoint(x: 0.76, y: 0.25))
            starPath.addLine(to: CGPoint(x: 2.35, y: 3.24))
            starPath.addLine(to: CGPoint(x: 0, y: 0.8))
            starPath.addLine(to: CGPoint(x: -2.35, y: 3.24))
            starPath.addLine(to: CGPoint(x: -0.76, y: 0.25))
            starPath.addLine(to: CGPoint(x: -3.8, y: -1.24))
            starPath.addLine(to: CGPoint(x: -0.47, y: -0.65))
            starPath.close()
            starColor.setFill()
            starPath.fill()
            
            context.restoreGState()
        }
        
        
        if (effect2) {
            //// Star 2 Drawing
            context.saveGState()
            context.translateBy(x: 25, y: 5)
            
            let star2Path = UIBezierPath()
            star2Path.move(to: CGPoint(x: 0, y: -4))
            star2Path.addLine(to: CGPoint(x: 0.47, y: -0.65))
            star2Path.addLine(to: CGPoint(x: 3.8, y: -1.24))
            star2Path.addLine(to: CGPoint(x: 0.76, y: 0.25))
            star2Path.addLine(to: CGPoint(x: 2.35, y: 3.24))
            star2Path.addLine(to: CGPoint(x: 0, y: 0.8))
            star2Path.addLine(to: CGPoint(x: -2.35, y: 3.24))
            star2Path.addLine(to: CGPoint(x: -0.76, y: 0.25))
            star2Path.addLine(to: CGPoint(x: -3.8, y: -1.24))
            star2Path.addLine(to: CGPoint(x: -0.47, y: -0.65))
            star2Path.close()
            starColor.setFill()
            star2Path.fill()
            
            context.restoreGState()
        }
        
        
        if (effect3) {
            //// Star 3 Drawing
            context.saveGState()
            context.translateBy(x: 34.5, y: 11)
            
            let star3Path = UIBezierPath()
            star3Path.move(to: CGPoint(x: 0, y: -4))
            star3Path.addLine(to: CGPoint(x: 0.47, y: -0.65))
            star3Path.addLine(to: CGPoint(x: 3.8, y: -1.24))
            star3Path.addLine(to: CGPoint(x: 0.76, y: 0.25))
            star3Path.addLine(to: CGPoint(x: 2.35, y: 3.24))
            star3Path.addLine(to: CGPoint(x: 0, y: 0.8))
            star3Path.addLine(to: CGPoint(x: -2.35, y: 3.24))
            star3Path.addLine(to: CGPoint(x: -0.76, y: 0.25))
            star3Path.addLine(to: CGPoint(x: -3.8, y: -1.24))
            star3Path.addLine(to: CGPoint(x: -0.47, y: -0.65))
            star3Path.close()
            starColor.setFill()
            star3Path.fill()
            
            context.restoreGState()
        }
        
        context.restoreGState()
        
    }
    
    //WARNING: Drawing method for 'Card' cannot be generated due to Trial limits.
    
    //WARNING: Drawing method for 'Home' cannot be generated due to Trial limits.
    
    //WARNING: Drawing method for 'Present' cannot be generated due to Trial limits.
    
    //WARNING: Drawing method for 'Canvas 2' cannot be generated due to Trial limits.
    
    //WARNING: Drawing method for 'Post' cannot be generated due to Trial limits.
    
    
    
    
    @objc(IconResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
